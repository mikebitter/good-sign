תכנון המערכת ללא שמירת מסמכים:
מנגנון העלאה והצגת המסמך:

המשתמש המחתים מעלה את קובץ ה-PDF לשרת.
השרת מאחסן את המסמך באופן זמני ומייצר קישור ייחודי לחתימה.
הקישור נשלח לחותם דרך אימייל או הודעה.
מנגנון החתימה מצד החותם:

החותם נכנס לקישור שמופיע במייל, והמערכת מציגה לו את המסמך בדפדפן עם השדות הנדרשים למילוי ולחתימה.
לאחר השלמת החתימה, המסמך החתום נשלח באופן אוטומטי לכתובת האימייל של המחתים.
מנגנון מחיקת המסמך:

לאחר שליחת המסמך החתום למחתים, המערכת מוחקת את המסמך מהשרת באופן מיידי, כדי לשמור על פרטיות המשתמשים ולא לשמור נתונים מיותרים.
טכנולוגיות וכלים מתאימים:
שימוש בזיכרון זמני (RAM):

ניתן להשתמש בזיכרון זמני (In-Memory Storage) או בשירותים כמו Redis כדי לאחסן נתונים לפרקי זמן קצרים מאוד.
המידע נשמר רק כל עוד התהליך רץ ולאחר מכן נמחק.
אחסון זמני של קבצים:

שמירת הקבצים בתיקייה זמנית על השרת (כמו /tmp) שתנוקה באופן אוטומטי על בסיס תזמון או מיד לאחר שליחת הקובץ.
שירותים כמו AWS Lambda או Google Cloud Functions יכולים לבצע זאת בצורה מאובטחת ומהירה.
שליחת המסמך והודעות:

שימוש בשירותי דואר אלקטרוני מבוססי API (כמו SendGrid או AWS SES) לשליחת המסמך החתום לכתובת המכתים.
אבטחה וניהול הרשאות:

הקפדה על גישה מאובטחת למסמכים באמצעות קישורים חד-פעמיים ושמירת הגישה לתקופה קצרה בלבד.
שימוש ב-HTTPS להצפנה של כל התקשורת בין המשתמשים לשרת.
יתרונות הגישה:
פרטיות ואבטחה: אין שמירה של מסמכים או מידע אישי לאחר תהליך החתימה, מה שמבטיח רמה גבוהה של פרטיות למשתמשים.
פשטות: פשטות ניהול המערכת בלי צורך בניהול מסד נתונים מלא, מה שמקטין את התחזוקה ואת הסיכונים הקשורים לאבטחת מידע.
חסכון במשאבים: הפחתת השימוש במשאבי אחסון ותחזוקה של מסמכים, מה שיכול גם לחסוך בעלויות לטווח הארוך.
סיכום:
השיטה שאתה מעוניין בה - עבודה בלי שמירת מסמכים או בסיס נתונים כבד - היא לא רק אפשרית אלא גם מאוד הגיונית לצרכים שלך. הפתרון פשוט, בטוח, ומותאם במיוחד לעבודה עם מסמכים רגישים בצורה מאובטחת ופרטית.

אם יש שאלות נוספות או חלקים נוספים בתהליך שאתה רוצה לפתח או להבין יותר לעומק, אני כאן לעזור!










